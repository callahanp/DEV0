#!/bin/bash
 set -x # uncomment for debugging
# new

# This script can create, populate and modify application suites.

# it accepts a number of parameters, analyzes the current situation
# with regards to the parameter values supplied and takes the appropriate 
# action if supported by the supplied parameter values.


source $DEV0_HELPERS/validate_name_f
source $DEV0_HELPERS/ensure_repository_f
source $DEV0_HELPERS/log_f
source $DEV0_HELPERS/list_copied_array_f

function suite(){
  log_f LOG_LEVEL_INFO "suite () called in suite_maintenance"
  local suite
  local branch
  local origin
  local upstream
  local vscode

  suite="${suite_p['name']}"
  branch="${suite_p['branch']}"
  origin="${suite_p['origin']}"
  upstream="${suite_p['upstream']}"
  vscode="${suite_p['vscode']}"

  echo "Processing suite"
  
  if [[ "$suite" == "" ]]; then
    echo "You need to specify the suite"
    return 1
  fi
  # The name has to be valid
  validate_name_f $suite
  if [[ ?1 == 1 ]]; then
  exit 1
  fi

  # suites are assumed to have a .git
  # make it so
  ensure_repository_f "$operation" "$loglevel" \
                     "$DEV0_TREES/" \
                     "$suite"       \
                     "$branch"      \
                     "$origin"      \
                     "$upstream"   

  set_vscode "suite" "${suite}.code-workspace"
} # end of suite()

function activity() {
# Activity directories are the second level containers for an appliation suite.
# They will contain Repositories, .code-workspace and a .vscode directory
# They may contain scripts to perform such actions as building, running &
# debugging, specific to the activity
# Activities can have their own git, complete with origin, upstream and 
# additional remotes to support a team wiorking on the activity.


  local suite
  local activity
  local vscode
  local activity_branch
  local origin_url
  local upstream_url

  suite=${activity_p['suite']}
  activity=${activity_p['name']}
  vscode=${activity_p['vscode']}
  branch=${activity_p['branch']}
  origin=${activity_p['origin']}
  upstream=${activity_p['upstream']}

# Activity Directories are created under suite directories
# They will contain application Repositories 
# They may contain activity-name.code-workspace and a .vscode directory
# They may also contain a .git that gitignores all the application repositories
# Such .git might be used by a group of developers to work together on a 
# small part of the application suite.

# The name has to be valid
  validate_name_f $activity
  if [[ ?1 == 1 ]]; then
  exit 1
  fi

  # activities have .git repositories only if they have one specified.
  if [[ ! "$branch$origin$upstream" == "" ]];then
  ensure_repository_f "$operation" "$loglevel" \
                     "$DEV0_TREES/$suite" \
                     "$activity"       \
                     "$branch"      \
                     "$origin"      \
                     "$upstream"   
  else 
    mkdir -p $DEV0_TREES/$suite/$activity
  fi
  set_vscode "activity" "${activity}.code-workspace"

  cd $DEV0_TREES/$suite/$activity

  # activities get their own .git repo only if needed

  # I'm leaving that for a future enhancement
  
  # also, we need to vary the type of .code-workspace 
  # beyond generic.
  set_vscode "activity" "${activity}.code-workspace"
}
function repository() {
  # Repository Directories are clones of repositories from GitLab, GitHub 
  # or Sourceforge.  They can also be plain .git repos without remotes.
  
  local suite
  local activity
  local repository
  local branch
  local origin
  local upstream

  suite=${repository_p['suite']}
  activity=${repository_p['activity']}
  repository=${repository_p['repository']}
  branch=${repository_p['branch']}
  origin=${repository_p['origin']}
  upstream=${repository_p['upstream']}
  clone_url""

  ensure_repository_f "$operation" "$loglevel" \
                     "$DEV0_TREES/$suite/$activity" \
                     "$repository"       \
                     "$branch"      \
                     "$origin"      \
                     "$upstream"   
}

# Associative arrays for directives
declare -A suite_p
declare -A activity_p
declare -A repository_p
operation=""
loglevel=0
#set -x
while [[ ! "$1" == "" ]]; do
  case $1 in
    "operation")
      operation="$2"; shift 2
      ;;
    loglevel)
      loglevel="$2"; shift 2
      echo "operation: ${operation}"
      echo "loglevel:  ${loglevel}"
      ;;
    suite)
      skip="no"
      while [[ ! $skip == "yes" ]]; do  
        case $1 in
           suite)
            suite_p['name']="$2"; shift 2;;
          branch)
            suite_p['branch']="$2"; shift 2;;
          origin)
            suite_p['origin']="$2"; shift 2;;
          upstream)
            suite_p['upstream']="$2"; shift 2;;
          vscode)
            suite_p['vscode']="$2"; shift 2;;
          *)
            skip="yes"
            if [[ LOG_LEVEL_INFO -le $loglevel ]]; then
              if [[ ! ${#suite_p[@]} == 0 ]]; then
                declare -A copied_array; 
                for key in ${!suite_p[@]}; do copied_array[$key]=${suite_p[$key]}; done;list_copied_array_f "Suite  Parameters"
              fi
            fi
            ##########
            suite #### <===== suite level created here
            ##########
            if [[ ?1 == 1 ]]; then
            log_f LOG_LEVEL_ERROR "suite ()returned an error status"
            exit 1 # any errors creating or verifying suite, then exit
            fi
            ;;
        esac
      done
      activity_p["suite"]=${suite_p["name"]}
      repository_p["suite"]=${suite_p["name"]}
      ;;
    activity)
      activity_p["name"]="$2"; shift 2
      skip="no"
      while [[ ! "$skip" == "yes" ]]; do 
        case $1 in
        suite)
          activity_p['suite']="$2"; shift 2;;
        branch)
          activity_p['branch']="$2"; shift 2;;
        origin)
          activity_p['origin']="$2"; shift 2;;
        upstream)
          activity_p['upstream']="$2"; shift 2;;
        vscode)
          activity_p['vscode'i fg]="$2"; shift 2;;
        *)
          if [[ ! ${#activity_p[@]} == 0 ]]; then
            declare -A copied_array; 
            for key in ${!activity_p[@]}; do copied_array[$key]=${activity_p[$key]}; done;list_copied_array_f "Activity  Parameters"
          fi
          ##########
          activity #### <===== activity level created here
          ##########
          if [[ ?1 == 1 ]]; then
          exit 1 # any errors creating or verifying suite, then exit
          fi
          declare -gA activity_p # reset empty associative array
          activity_p["suite"]=${suite["name"]}

          skip="yes"
          ;;
        esac
      done
      ;;
    repository)
      repository_p["name"]="$2"; shift 2
      repository_p["activity"]=${activity_p["name"]}
     skip="no"
      while [[ ! "$skip" == "yes" ]]; do 
        case $1 in
        suite)
          repository_p["suite"]="$2"; shift 2;;
        activity)
          repository_p["activity"]="$2"; shift 2;;
        branch)
          repository_p["branch"]="$2"; shift 2;;
        origin)
          repository_p["origin"]="$2"; shift 2;;
        upstream)
          repository_p["upstream"]="$2"; shift 2;;
        vscode)
          repository_p["vscode"]="$2"; shift 2;;
        *)
          if [[ ! ${#repository_p[@]} == 0 ]]; then
            declare -A copied_array; 
            for key in ${!repository_p[@]}; do copied_array[$key]=${repository_p[$key]}; done;list_copied_array_f "repository  Parameters"
          fi
          ##########
          repository #### <===== repository level created here
          ##########
          if [[ ?1 == 1 ]]; then
          exit 1 # any errors creating or verifying suite, then exit
          fi
          declare -gA repository_p # reset empty associative array
          repository_p["activity"]=${activity["name"]}
          skip="yes"

        esac
      done
      ;; # end of case repository)
    *)
        Error="$item is not a valid item"
        exit 1
      ;;
  esac
  if [[ "$1" == "" ]]; then
    break
  fi
done

exit






